// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SlimePooled extends ethereum.Event {
  get params(): SlimePooled__Params {
    return new SlimePooled__Params(this);
  }
}

export class SlimePooled__Params {
  _event: SlimePooled;

  constructor(event: SlimePooled) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get from(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SlimePools__getCoordinatesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class SlimePools extends ethereum.SmartContract {
  static bind(address: Address): SlimePools {
    return new SlimePools("SlimePools", address);
  }

  getCoordinates(tokenId: BigInt): SlimePools__getCoordinatesResult {
    let result = super.call(
      "getCoordinates",
      "getCoordinates(uint32):(uint32,uint32)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return new SlimePools__getCoordinatesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getCoordinates(
    tokenId: BigInt
  ): ethereum.CallResult<SlimePools__getCoordinatesResult> {
    let result = super.tryCall(
      "getCoordinates",
      "getCoordinates(uint32):(uint32,uint32)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SlimePools__getCoordinatesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  mostSlimed(): BigInt {
    let result = super.call("mostSlimed", "mostSlimed():(uint32)", []);

    return result[0].toBigInt();
  }

  try_mostSlimed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mostSlimed", "mostSlimed():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  slimeAddress(): Address {
    let result = super.call("slimeAddress", "slimeAddress():(address)", []);

    return result[0].toAddress();
  }

  try_slimeAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("slimeAddress", "slimeAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  slimePools(param0: BigInt): BigInt {
    let result = super.call("slimePools", "slimePools(uint32):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_slimePools(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("slimePools", "slimePools(uint32):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get slimeAddress_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class PoolSlimeCall extends ethereum.Call {
  get inputs(): PoolSlimeCall__Inputs {
    return new PoolSlimeCall__Inputs(this);
  }

  get outputs(): PoolSlimeCall__Outputs {
    return new PoolSlimeCall__Outputs(this);
  }
}

export class PoolSlimeCall__Inputs {
  _call: PoolSlimeCall;

  constructor(call: PoolSlimeCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get slimeAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PoolSlimeCall__Outputs {
  _call: PoolSlimeCall;

  constructor(call: PoolSlimeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetSlimeAddressCall extends ethereum.Call {
  get inputs(): SetSlimeAddressCall__Inputs {
    return new SetSlimeAddressCall__Inputs(this);
  }

  get outputs(): SetSlimeAddressCall__Outputs {
    return new SetSlimeAddressCall__Outputs(this);
  }
}

export class SetSlimeAddressCall__Inputs {
  _call: SetSlimeAddressCall;

  constructor(call: SetSlimeAddressCall) {
    this._call = call;
  }

  get slimeAddress_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetSlimeAddressCall__Outputs {
  _call: SetSlimeAddressCall;

  constructor(call: SetSlimeAddressCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
