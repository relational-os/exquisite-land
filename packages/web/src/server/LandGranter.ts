import { ContractTransaction } from '@ethersproject/contracts';
import { LandGranter__factory } from '@sdk/factories/LandGranter__factory';
import sharp from 'sharp';
import crypto from 'crypto';

let basePath = process.cwd();
if (process.env.NODE_ENV === 'production') {
  basePath = path.join(process.cwd(), '.next/server/chunks');
}
path.resolve(basePath, 'fonts', 'fonts.conf');
path.resolve(basePath, 'fonts', 'VT323-Regular.ttf');

// @ts-ignore
import steggy from 'steggy';
import { Wallet } from '@ethersproject/wallet';
import path from 'path';
import { LAND_GRANTER_CONTRACT_ADDRESS } from '@app/features/AddressBook';
import { getCoordinates } from '@app/features/TileUtils';
import { parse, stringify } from 'svgson';
import PALETTES from '@constants/Palettes';
import prisma from 'lib/prisma';
import getContract from '@app/features/getContract';
import { getJsonRpcProvider } from '@app/features/getJsonRpcProvider';

const colorLUT = new Map<
  string,
  { hexIndex: string; red: number; green: number; blue: number }
>();
PALETTES[0].map((color, index) =>
  colorLUT.set(color, {
    hexIndex: index.toString(16),
    red: parseInt(color.substr(1, 2), 16),
    green: parseInt(color.substr(3, 2), 16),
    blue: parseInt(color.substr(5, 2), 16)
  })
);

const findClosestColor = (red: number, green: number, blue: number) => {
  let min = 1000000000;
  let val = '';

  // minimize difference
  colorLUT.forEach((v, k) => {
    const distance = Math.sqrt(
      Math.pow(v.red - red, 2) +
        Math.pow(v.green - green, 2) +
        Math.pow(v.blue - blue, 2)
    );

    if (distance < min) {
      min = distance;
      val = v.hexIndex;
    }
  });

  return val;
};

export const decodePencil = async (data: string): Promise<string> => {
  const coinBuffer = await sharp(Buffer.from(data, 'base64')).resize(800, 800);

  let decoded = Array(23).fill('');

  await Promise.all(
    await pixels.map(async (pixel, index) => {
      const croppedBuffer = await coinBuffer
        .clone()
        .extract({ left: pixel.left, top: pixel.top, width: 28, height: 28 })
        .png()
        .toBuffer();

      const pixelStats = await sharp(croppedBuffer).stats();

      const red = Math.round(pixelStats.channels[0].mean);
      const green = Math.round(pixelStats.channels[1].mean);
      const blue = Math.round(pixelStats.channels[2].mean);

      decoded[index] = findClosestColor(red, green, blue);
    })
  );

  let decodedString = '';
  decoded.map((v) => (decodedString += v));

  return decodedString;
};

export const getTokenIDForCoin = async (
  coinB64: string
): Promise<{
  tokenId: number | undefined;
  coinCreator: string | undefined;
}> => {
  // TODO: lookup x_y from db, for now this is done in memory
  const decoded = await decodePencil(coinB64);

  const result = await prisma.generatedCoin.findFirst({
    where: {
      digest: decoded
    }
  });

  return { tokenId: result?.tokenID, coinCreator: result?.creator };
};

export const checkTokenIdIsOwnedByLandGranter = async (
  tokenId: number
): Promise<boolean> => {
  try {
    const contract = getContract(getJsonRpcProvider);
    const ownerAddress = await contract.ownerOf(tokenId);

    return (
      ownerAddress.toLowerCase() === LAND_GRANTER_CONTRACT_ADDRESS.toLowerCase()
    );
  } catch (err) {
    console.log(err);
    return false;
  }
};

export const grantLandTile = async (
  tokenId: number,
  recipient: string,
  coinCreator: string
): Promise<ContractTransaction> => {
  const wallet = new Wallet(
    process.env.CONTRACT_OWNER_PRIVATE_KEY as string,
    getJsonRpcProvider
  );
  const contract = LandGranter__factory.connect(
    LAND_GRANTER_CONTRACT_ADDRESS,
    wallet
  );

  const nonce = await wallet.getTransactionCount();
  // const gasPrice = utils.parseUnits('70', 'gwei');

  return contract.grant(tokenId, recipient, coinCreator, {
    // gasPrice,
    nonce
  });
};

export const encodePencil = async (x: number, y: number, addr: string) => {
  const parsedPencilSVG = await parse(pencilSVG);
  console.log(parsedPencilSVG.children.length);

  const data = crypto
    .createHash('sha256')
    .update(`${process.env.LAND_GRANTER_SALT}${x}${y}${addr.slice(2)}`)
    .digest('hex')
    .slice(0, 23);

  parsedPencilSVG.children.map((rect: any, index: number) => {
    const colorIndex = parseInt(data[index], 16);
    rect.attributes.fill = PALETTES[0][colorIndex];
  });

  return { svg: stringify(parsedPencilSVG), digest: data };
};

// Should only be called by admin
export const generateCoin = async (
  tokenId: number,
  address: string
): Promise<{ coin: Buffer; digest: string }> => {
  const [x, y] = getCoordinates(tokenId);
  const baseCoinBuffer = Buffer.from(baseCoinB64String, 'base64');
  const { svg: encodedPencil, digest } = await encodePencil(x, y, address);
  const coinBuffer = await sharp(baseCoinBuffer)
    .composite([
      {
        input: Buffer.from(encodedPencil),
        top: 213,
        left: 298
      },
      {
        input: Buffer.from(
          `<svg width="800" height="800" viewBox="0 0 800 800" fill="none" xmlns="http://www.w3.org/2000/svg"><style type="text/css">@font-face { font-family: VT323; src: url(data:application/font-woff2;charset=utf-8;base64,${fontWoffB64String}); }</style><text fill="#E68D3E" xml:space="preserve" style="white-space: pre" font-family="VT323" font-size="72" letter-spacing="0em" x="50%" y="64%" dominant-baseline="middle" text-anchor="middle">[${x},${y}]</text></svg>`
        )
      }
    ])
    .png()
    .toBuffer();

  return { coin: coinBuffer, digest };
};

const pencilSVG =
  '<svg width="200" height="200" viewBox="0 0 7 7" shape-rendering="crisp-edges" xmlns="http://www.w3.org/2000/svg"><rect fill="#f00" width="1.01" height="1.01" x="4" y="0"/><rect fill="#f00" width="1.01" height="1.01" x="3" y="1"/><rect fill="#f00" width="1.01" height="1.01" x="4" y="1"/><rect fill="#f00" width="1.01" height="1.01" x="5" y="1"/><rect fill="#f00" width="1.01" height="1.01" x="2" y="2"/><rect fill="#f00" width="1.01" height="1.01" x="3" y="2"/><rect fill="#f00" width="1.01" height="1.01" x="4" y="2"/><rect fill="#f00" width="1.01" height="1.01" x="5" y="2"/><rect fill="#f00" width="1.01" height="1.01" x="6" y="2"/><rect fill="#f00" width="1.01" height="1.01" x="1" y="3"/><rect fill="#f00" width="1.01" height="1.01" x="2" y="3"/><rect fill="#f00" width="1.01" height="1.01" x="3" y="3"/><rect fill="#f00" width="1.01" height="1.01" x="4" y="3"/><rect fill="#f00" width="1.01" height="1.01" x="5" y="3"/><rect fill="#f00" width="1.01" height="1.01" x="0" y="4"/><rect fill="#f00" width="1.01" height="1.01" x="2" y="4"/><rect fill="#f00" width="1.01" height="1.01" x="3" y="4"/><rect fill="#f00" width="1.01" height="1.01" x="4" y="4"/><rect fill="#f00" width="1.01" height="1.01" x="0" y="5"/><rect fill="#f00" width="1.01" height="1.01" x="3" y="5"/><rect fill="#f00" width="1.01" height="1.01" x="0" y="6"/><rect fill="#f00" width="1.01" height="1.01" x="1" y="6"/><rect fill="#f00" width="1.01" height="1.01" x="2" y="6"/></svg>';
const fontWoffB64String =
  'data:application/font-woff2;charset=utf-8;base64,';

const baseCoinB64String =
  '';

const pixels = [
  { top: 213, bottom: 241, left: 413, right: 441 }, // x=4, y=0, index=0

  { top: 242, bottom: 270, left: 384, right: 412 }, // x=3, y=1, index=1
  { top: 242, bottom: 270, left: 413, right: 440 }, // x=4, y=1, index=2
  { top: 242, bottom: 270, left: 441, right: 469 }, // x=5, y=1, index=3

  { top: 271, bottom: 298, left: 356, right: 383 }, // x=2, y=2, index=4
  { top: 271, bottom: 298, left: 384, right: 412 }, // x=3, y=2, index=5
  { top: 271, bottom: 298, left: 413, right: 440 }, // x=4, y=2, index=6
  { top: 271, bottom: 298, left: 441, right: 469 }, // x=5, y=2, index=7
  { top: 271, bottom: 298, left: 470, right: 498 }, // x=6, y=2, index=8

  { top: 299, bottom: 327, left: 327, right: 355 }, // x=1, y=3, index=9
  { top: 299, bottom: 327, left: 356, right: 383 }, // x=2, y=3, index=10
  { top: 299, bottom: 327, left: 384, right: 412 }, // x=3, y=3, index=11
  { top: 299, bottom: 327, left: 413, right: 440 }, // x=4, y=3, index=12
  { top: 299, bottom: 327, left: 441, right: 469 }, // x=5, y=3, index=13

  { top: 328, bottom: 355, left: 298, right: 326 }, // x=0, y=4, index=14
  { top: 328, bottom: 355, left: 356, right: 383 }, // x=2, y=4, index=15
  { top: 328, bottom: 355, left: 384, right: 412 }, // x=3, y=4, index=16
  { top: 328, bottom: 355, left: 413, right: 440 }, // x=4, y=4, index=17

  { top: 356, bottom: 384, left: 298, right: 326 }, // x=0, y=5, index=18
  { top: 356, bottom: 384, left: 384, right: 412 }, // x=3, y=5, index=19

  { top: 385, bottom: 413, left: 298, right: 326 }, // x=0, y=6, index=20
  { top: 385, bottom: 413, left: 327, right: 355 }, // x=1, y=6, index=21
  { top: 385, bottom: 413, left: 356, right: 383 } // x=2, y=6, index=22
];
